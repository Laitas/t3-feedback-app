// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider             = "postgresql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

// Neccessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    username      String
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    image         String    @default("https://res.cloudinary.com/dfzejvvsl/image/upload/v1656084356/cld-sample-3.jpg")
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    comments      Comment[]
    Reply         Reply[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    user      User      @relation(fields: [userId], references: [id])
    userId    String
    title     String
    desc      String
    comments  Comment[]
    upvotes   Int
    category  String
}

model Comment {
    id       String  @id @default(cuid())
    Post     Post    @relation(fields: [postId], references: [id])
    author   User?   @relation(fields: [authorId], references: [id])
    authorId String
    postId   String
    comment  String
    replies  Reply[]
}

model Reply {
    id         String  @id @default(cuid())
    author     User    @relation(fields: [authorId], references: [id])
    authorId   String
    Comment    Comment @relation(fields: [commentId], references: [id])
    commentId  String
    reply      String
    replyingTo String
}
